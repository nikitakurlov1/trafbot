
import logging
import sqlite3
import json
import requests
import html
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ----------------- CONFIG (–≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è) -----------------
TELEGRAM_TOKEN = "8422360803:AAG44u_upD1NCaxOdRR9rfy648xYgdeNsdo"
OPENROUTER_API_KEY = "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"
# telegram numeric id –∞–¥–º–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 123456789)
ADMIN_ID = 7474193095

# OpenRouter endpoint –∏ –º–æ–¥–µ–ª—å ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ
OPENROUTER_URL = "https://api.openrouter.ai/v1/chat/completions"
OPENROUTER_MODEL = "MiniMax: MiniMax M2"  # –ø—Ä–∏–º–µ—Ä
# System prompt (—Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏)
SYSTEM_PROMPT = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî –±—Ä–æ–∫–µ—Ä-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç eToroTrade. –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü. "
        "–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—à—ë–ª –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å. –ó–∞–¥–∞—á–∞ ‚Äî –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö "
        "–∏ –ø–ª–∞–≤–Ω–æ –ø–æ–¥–≤–µ—Å—Ç–∏ –∫ —Å–æ–≥–ª–∞—Å–∏—é –ø–µ—Ä–µ–π—Ç–∏ –≤ Telegram-–±–æ—Ç @eToroTrade_Robot. –û–±—â–∞–π—Å—è –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏ "
        "–ø—Ä–æ–¥–∞–∂: –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–π –¥–æ–≤–µ—Ä–∏–µ, —Ö–≤–∞–ª–∏ –ø–æ–¥—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–¥–±–∏—Ä–∞–π –±–∏—Ä–∂—É –ø–æ–¥ –Ω–µ–≥–æ. –£–∑–Ω–∞–π –µ–≥–æ —Ü–µ–ª—å –∏–ª–∏ "
        "–º–µ—á—Ç—É (–º–∞—à–∏–Ω–∞, —Å–≤–æ–±–æ–¥–∞, –¥–æ—Ö–æ–¥, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è) –∏ –ø—Ä–∏ –æ—Ç–∫–∞–∑–∞—Ö –º—è–≥–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —ç—Ç–æ —à–∞–Ω—Å –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è "
        "–∫ –º–µ—á—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ, –∂–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã, –±–µ–∑ –≤–æ–¥—ã. –°—Ä–∞–≤–Ω–∏ eToro —Å –¥—Ä—É–≥–∏–º–∏ –±–∏—Ä–∂–∞–º–∏ (Bybit, Binance) "
        "‚Äî –ø–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ eToro –¥–∞—ë—Ç 3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –∫—Ä–∏–ø—Ç–∞, –∞–∫—Ü–∏–∏, —Å—ã—Ä—å—ë, –∏ —á—Ç–æ —Å –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –ø–ª–µ—á–æ–º –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –º–∏–Ω–∏–º—É–º–∞. "
        "–í —Ñ–∏–Ω–∞–ª–µ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –±–æ—Ç @eToroTrade_Robot –≤ Telegram ‚Äî —ç—Ç–æ –ø—Ä–æ—â–µ –∏ —É–¥–æ–±–Ω–µ–µ, –∏ —á—Ç–æ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    ),
}
# --------------------------------------------------------------------

DB_PATH = Path("conversations.sqlite")
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
logger = logging.getLogger(__name__)

# ----------------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -----------------

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY, -- telegram user id
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TEXT
        )
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT, -- user / assistant / system
            content TEXT,
            created_at TEXT
        )
        """
    )
    conn.commit()
    conn.close()


def add_user(user_id: int, username: str, first_name: str, last_name: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if cur.fetchone() is None:
        cur.execute(
            "INSERT INTO users (id, username, first_name, last_name, created_at) VALUES (?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", last_name or "", datetime.utcnow().isoformat()),
        )
        conn.commit()
    conn.close()


def save_message(user_id: int, role: str, content: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO messages (user_id, role, content, created_at) VALUES (?, ?, ?, ?)",
        (user_id, role, content, datetime.utcnow().isoformat()),
    )
    conn.commit()
    conn.close()


def get_users() -> List[Dict[str, Any]]:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, username, first_name, last_name, created_at FROM users ORDER BY created_at DESC")
    rows = cur.fetchall()
    conn.close()
    return [dict(id=r[0], username=r[1], first_name=r[2], last_name=r[3], created_at=r[4]) for r in rows]


def get_conversation(user_id: int) -> List[Dict[str, str]]:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT role, content, created_at FROM messages WHERE user_id = ? ORDER BY id ASC", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return [dict(role=r[0], content=r[1], created_at=r[2]) for r in rows]


# ----------------- OpenRouter interaction -----------------

def call_openrouter(messages: List[Dict[str, str]]) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ role/content) –≤ OpenRouter –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞."""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": messages,
        "max_tokens": 800,
        "temperature": 0.7,
    }
    try:
        resp = requests.post(OPENROUTER_URL, headers=headers, json=payload, timeout=30)
        resp.raise_for_status()
        data = resp.json()
        # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞/–≤–µ—Ä—Å–∏–∏
        # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç choices[0].message.content
        if "choices" in data and len(data["choices"]) > 0:
            content = data["choices"][0].get("message", {}).get("content")
            if isinstance(content, dict):
                # –∏–Ω–æ–≥–¥–∞ content –º–æ–∂–µ—Ç –±—ã—Ç—å {'type':'text','parts':[...]} –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–º
                return "\n".join(content.get("parts", [])) if content.get("parts") else str(content)
            return content or ""
        # fallback
        return json.dumps(data, ensure_ascii=False)[:2000]
    except Exception as e:
        logger.exception("OpenRouter request failed")
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}"


# ----------------- Telegram handlers -----------------

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, getattr(user, "username", ""), user.first_name, getattr(user, "last_name", ""))
    save_message(user.id, "system", SYSTEM_PROMPT["content"])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º system prompt (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)

    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")]],
        resize_keyboard=True,
    )

    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{html.escape(user.first_name or user.username or '–∏–Ω–≤–µ—Å—Ç–æ—Ä')}</b>! üëã\n"
        "–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Å —á–µ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞—á–∞—Ç—å?",
        reply_markup=kb,
    )


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äî —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
1

async def worker_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    users = get_users()
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = []
    for u in users:
        title = u["username"] or f"{u['first_name']} {u['last_name']}".strip() or str(u["id"])
        keyboard.append([InlineKeyboardButton(title, callback_data=f"worker_user:{u['id']}")])

    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data and data.startswith("worker_user:"):
        target_id = int(data.split(":", 1)[1])
        # –ö–Ω–æ–ø–∫–∏: –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥ (–æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞), –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏–∞–ª–æ–≥
        user_row = None
        for u in get_users():
            if u["id"] == target_id:
                user_row = u
                break
        if not user_row:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title = user_row["username"] or f"{user_row['first_name']} {user_row['last_name']}".strip() or str(user_row["id"]) 
        keyboard = [
            [InlineKeyboardButton("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data=f"worker_copy:{target_id}"),
             InlineKeyboardButton("üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"worker_read:{target_id}")],
        ]
        await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {title}", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data and data.startswith("worker_copy:"):
        target_id = int(data.split(":", 1)[1])
        # –Ω–∞–π—Ç–∏ username
        u = next((x for x in get_users() if x["id"] == target_id), None)
        if not u:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        tag = f"@{u['username']}" if u["username"] else f"tg://user?id={u['id']}"
        await query.edit_message_text(f"–¢–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{tag}</code>")

    elif data and data.startswith("worker_read:"):
        target_id = int(data.split(":", 1)[1])
        conv = get_conversation(target_id)
        if not conv:
            await query.edit_message_text("–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        lines = []
        for m in conv:
            ts = m.get("created_at", "")
            role = m.get("role")
            content = m.get("content")
            lines.append(f"[{ts}] {role.upper()}: {content}")
        txt = "\n\n".join(lines)
        # –ï—Å–ª–∏ –±–æ–ª—å—à–æ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Ñ–∞–π–ª
        if len(txt) > 3500:
            p = Path("tmp_dialog.txt")
            p.write_text(txt, encoding="utf-8")
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∏–∞–ª–æ–≥ –∫–∞–∫ —Ñ–∞–π–ª...")
            await query.message.reply_document(document=InputFile(str(p)), filename=f"dialog_{target_id}.txt")
            p.unlink(missing_ok=True)
        else:
            # –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∏–∞–ª–æ–≥–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
            safe = html.escape(txt)
            await query.edit_message_text(f"<pre>{safe}</pre>", parse_mode="HTML")


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    add_user(user.id, getattr(user, "username", ""), user.first_name, getattr(user, "last_name", ""))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_message(user.id, "user", text)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: system prompt + –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conv = get_conversation(user.id)
    # OpenRouter expects messages list like [{role:..., content:...}, ...]
    messages = []
    # –¥–æ–±–∞–≤–∏–º system
    messages.append({"role": "system", "content": SYSTEM_PROMPT["content"]})
    # –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (user + assistant)
    for m in conv[-20:]:
        role = m["role"]
        messages.append({"role": role, "content": m["content"]})

    # –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—ã—à–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    # messages.append({"role": "user", "content": text})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenRouter
    await update.message.chat.action("typing")
    ai_response = call_openrouter(messages)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
    save_message(user.id, "assistant", ai_response)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –∫—Ä–∞—Å–∏–≤–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ @eToroTrade_Robot
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ @eToroTrade_Robot", url="https://t.me/eToroTrade_Robot")]]
    )

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∞–π–ª.
    if len(ai_response) > 3000:
        p = Path(f"reply_{user.id}.txt")
        p.write_text(ai_response, encoding="utf-8")
        await update.message.reply_document(document=InputFile(str(p)), filename="response.txt", caption="–û—Ç–≤–µ—Ç –æ—Ç eToroTrade:")
        p.unlink(missing_ok=True)
    else:
        await update.message.reply_text(ai_response, reply_markup=kb)


# ----------------- Main -----------------

def main():
    init_db()
    if TELEGRAM_TOKEN.startswith("YOUR_"):
        logger.error("–í —Ñ–∞–π–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω TELEGRAM_TOKEN. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        return
    if OPENROUTER_API_KEY.startswith("YOUR_"):
        logger.error("–í —Ñ–∞–π–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω OPENROUTER_API_KEY. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –∫–ª—é—á –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("worker", worker_handler))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()


if __name__ == "__main__":
    main()
